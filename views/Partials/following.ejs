<script>
  var isSignupMode = true;
  var isLoggedIn = false;
  var users = {};
  var userEmail = null;
  function followingButtonClicked() {
    if (isLoggedIn) {
      // User is logged in, show following
      toggleModal("followingModal", event);
    } else {
      // User is not logged in, show the  signup/login modal
      toggleModal("userModal", event);
    }
  }
  function switchMode() {
    var form = document.getElementById("authForm");
    var submitButton = document.getElementById("submit");
    var switchButton = document.getElementById("switchMode");

    if (isSignupMode) {
      form.setAttribute("action", "/users/login");
      submitButton.setAttribute("value", "Login");
      switchButton.textContent = "Switch to Sign Up";
    } else {
      form.setAttribute("action", "/users/register");
      submitButton.setAttribute("value", "Sign Up");
      switchButton.textContent = "Switch to Login";
    }

    isSignupMode = !isSignupMode;
  }

  //will work along side with backend code to check if the users log in details are correct and will take the message from the backend and display it to the user onb
  function handleFormSubmit(event) {
    event.preventDefault(); // Prevent the form from submitting normally
    var email = document.getElementById("email").value;
    var password = document.getElementById("password").value;

    if (!isSignupMode) {
      var url = "/users/login";

      fetch(url, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ email: email, password: password }),
      })
        .then((response) => response.json())
        .then((data) => {
          if (data.success) {
            alert("Login successful!");
            userEmail = email;
            isLoggedIn = true;
            onLogin();
            closeAllModals();
          } else {
            alert(data.message);
          }
        })
        .catch((error) => {
          console.error("Error:", error);
        });
    } else {
      var url = "/users/register";

      fetch(url, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ email: email, password: password }),
      })
        .then((response) => response.json())
        .then((data) => {
          if (data.success) {
            alert("Account created successfully!");
            isLoggedIn = true;
            closeAllModals();
          } else {
            alert(data.message);
          }
        })
        .catch((error) => {
          console.error("Error:", error);
        });
    }
  }

  function onLogin() {
  // Update the visibility of all follow buttons
  for (let id in followButtons) {
    const followButton = document.getElementById(`follow-btn-${id}`);
    if (followButton) {
      followButton.style.display = 'inline';
    }
  }
}

  fetch("/isLoggedIn")
    .then((response) => response.json())
    .then((data) => {
      isLoggedIn = data.isLoggedIn;
      var followButton = document.getElementById("followButton");
      if (isLoggedIn) {
        // User is logged in, show the button
        followButton.style.display = "block";
      } else {
        // User is not logged in, hide the button
        followButton.style.display = "none";
      }
    });
  function follow(eventData) {
    const email = userEmail;
    const groupName = eventData.groupName;
    const groupLink = eventData.groupLink;

    fetch("/followGroup", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({ email, groupName, groupLink }),
    })
      .then((response) => response.json())
      .then((data) => {
        if (data.success) {
          console.log("The group has been followed!");

          const followedGroupsList =
            document.getElementById("followedGroupsList");

          // Create a new li element
          const newGroup = document.createElement("li");

          // Set the text of the new li element to the group name
          newGroup.textContent = groupName;

          // Append the new li element to the ul
          followedGroupsList.appendChild(newGroup);
        } else {
          console.log("The user is already following this group.");
        } if(!followedGroupsList.hasChildNodes()){
          const noGroupsMessage = document.createElement("li");
          noGroupsMessage.textContent = "Not following any groups";
          followedGroupsList.appendChild(noGroupsMessage);
        }
      })
      .catch((error) => {
        console.error("Error:", error);
      });
      

      function notFollowingGroups()
      {
        const followedGroupsList =
          document.getElementById("followedGroupsList");
        if (!followedGroupsList.hasChildNodes()) {
          const noGroupsMessage = document.createElement("li");
          noGroupsMessage.textContent = "Not following any groups";
          followedGroupsList.appendChild(noGroupsMessage);
        }
      }

  }
</script>
