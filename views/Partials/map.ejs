<script>




  //  CJ- using callback function “initMap” from Google Map Script API URL.  This ensures the javascript will only run once the API has finished loading, otherwise it would run before map exists.
  function initMap() {
    // <!-- CJ- targeting "map-div" to load map -->
    map = new google.maps.Map(document.getElementById("map-div"), {
      // CJ- loads map at specific lattitude and longitude
      center: { lat: 53.349076911151386, lng: -6.242441879918039 },
      // CJ- defines the zoom level
      zoom: 14,
      // CJ- mapId is the id of the map created in Google Cloud Platform
      mapId: "13185b1ffbbba3af",
      //CJ- remove default map controls from map
      mapTypeControl: false,
      fullscreenControl: false,
      streetViewControl: false,
    });

    //CJ- TO-DO- array list storing "Dublin Events"
    //CJ- TO-DO- inside FOR loop to iterate through array list and create markers/windows fro each event

    //CJ- Variable to keep track of the open info window
    let currentInfoWindow = null;

    //CJ- variable to keep track of the current filter
    var currentFilter = null;

    //CJ- variable to keep track of all markers
    var markers = [];

    //CJ- Hardcoded markers and info windows for events
    //CJ- Function to handle marker click events
    function handleMarkerClick(marker, infowindow) {
      return function () {
        // Close the current info window if it's open
        if (currentInfoWindow) {
          currentInfoWindow.close();
        }

        // CJ- open info window on map at marker location
        infowindow.open(map, marker);

        // Set the current info window to the newly opened one
        currentInfoWindow = infowindow;
      };
    }

    // CJ- creates new constant named marker to attach to event listener to open info window
    const marker1 = new google.maps.Marker({
      // CJ- sets the location of marker
      position: { lat: 53.34904445277732, lng: -6.2430142587188975 },
      map,
      //CJ- title of marker
      title: "Education: Starting",
      icon: {
        // CJ- location of icon image
        url: "EdS.png",
        // CJ- new Google maps object that defines the size of icon image
        scaledSize: new google.maps.Size(48, 48),
      },
      //CJ- animation that drops pin from top of the map
      animation: google.maps.Animation.DROP,
    });

    // //CJ- new info window object set to open when marker is clicked
    // const infowindow1 = new google.maps.InfoWindow({
    // // CJ- div class to style info window content
    // content: `
    //     <div class="info-window-content">
    //     <h3>Education</h3>
    //     <p>Status: Starting</p>
    //     <p>Location: National College Of Ireland</p>
    //     <p>Mayor Street Lower</p>
    //     <p>Join us for an enlightening evening of knowledge and camaraderie.</p>
    //     <p>Let's expand our horizons and make lasting memories together!</p>
    //     </div>
    // `
    // });

    // // CJ- event listener that opens info window when clicked click to open event window
    // marker1.addListener("click", handleMarkerClick(marker1, infowindow1));

    // const marker2 = new google.maps.Marker({
    // position: { lat: 53.36013894903569, lng: -6.260932804848787 },
    // map,
    // title: "Social: Starting",
    // icon: {
    //     url: "SoS.png",
    //     scaledSize: new google.maps.Size(48, 48),
    // },
    // animation: google.maps.Animation.DROP,
    // });

    // const infowindow2 = new google.maps.InfoWindow({
    // content: `
    //     <div class="info-window-content">
    //     <h3>Social</h3>
    //     <p>Status: Starting</p>
    //     <p>Location: Dorset Street Lower</p>
    //     <p>Dublin, DO1A2Y5</p>
    //     <p>Join us for a fun-filled evening of laughter and entertainment. </p>
    //     <p>Let's create unforgettable memories together!</p>
    //     </div>
    // `
    // });

    // // CJ- event listener that opens info window when clicked click to open event window
    // marker2.addListener("click", handleMarkerClick(marker2, infowindow2));

    //   const marker3 = new google.maps.Marker({
    //     position: { lat: 53.355, lng: -6.26 },
    //     map,
    //     title: "Charity: Ending",
    //     icon: {
    //       url: "Che.png",
    //       scaledSize: new google.maps.Size(48, 48),
    //     },
    //     animation: google.maps.Animation.DROP,
    //   });

    //   const infowindow3 = new google.maps.InfoWindow({
    //     content: `
    //   <div class="info-window-content">
    //     <h3>Charity</h3>
    //     <p>Status: Ending</p>
    //     <p>Location: O'Connell Street Upper</p>
    //     <p>Dublin, DO1A2Y5</p>
    //     <p>Join us for a noble cause and make a difference in the world!</p>
    //     </div>
    //   `
    //   });

    // // CJ- event listener that opens info window when clicked click to open event window
    // marker3.addListener("click", handleMarkerClick(marker3, infowindow3));

    //   const marker4 = new google.maps.Marker({
    //     position: { lat: 53.35, lng: -6.265 },
    //     map,
    //     title: "Culture: Ending",
    //     icon: {
    //       url: "CuE.png",
    //       scaledSize: new google.maps.Size(48, 48),
    //     },
    //     animation: google.maps.Animation.DROP,
    //   });

    //   const infowindow4 = new google.maps.InfoWindow({
    //     content: `
    //   <div class="info-window-content">
    //     <h3>Culture</h3>
    //     <p>Status: Ending</p>
    //     <p>Location: Temple Bar</p>
    //     <p>Dublin, DO1A2Y5</p>
    //     <p>Experience the rich cultural heritage and immerse yourself in the arts!</p>
    //     </div>
    //   `
    //   });

    // // CJ- event listener that opens info window when clicked click to open event window
    // marker4.addListener("click", handleMarkerClick(marker4, infowindow4));

    //   const marker5 = new google.maps.Marker({
    //   position: { lat: 53.355, lng: -6.255 },
    //   map,
    //   title: "Sports: Ongoing",
    //   icon: {
    //     url: "SpO.png",
    //     scaledSize: new google.maps.Size(48, 48),
    //   },
    //   animation: google.maps.Animation.DROP,
    //   });

    //   const infowindow5 = new google.maps.InfoWindow({
    //     content: `
    //   <div class="info-window-content">
    //     <h3>Sports</h3>
    //     <p>Status: Ongoing</p>
    //     <p>Location: Croke Park</p>
    //     <p>Dublin, DO1A2Y5</p>
    //     <p>Come and witness the excitement of a thrilling sporting event!</p>
    //     </div>
    //   `
    //   });

    // // CJ- event listener that opens info window when clicked click to open event window
    // marker5.addListener("click", handleMarkerClick(marker5, infowindow5));

    //   const marker6 = new google.maps.Marker({
    //   position: { lat: 53.360, lng: -6.255 },
    //   map,
    //   title: "Entertainment: Ongoing",
    //   icon: {
    //     url: "EnO.png",
    //     scaledSize: new google.maps.Size(48, 48),
    //   },
    //   animation: google.maps.Animation.DROP,
    //   });

    //   const infowindow6 = new google.maps.InfoWindow({
    //     content: `
    //   <div class="info-window-content">
    //     <h3>Sports</h3>
    //     <p>Status: Ongoing</p>
    //     <p>Location: Concert Hall</p>
    //     <p>Dublin, DO1A2Y5</p>
    //     <p>Experience the magic of live music and let the melodies transport you to another world!</p>
    //     </div>
    //   `
    //   });

    // // CJ- event listener that opens info window when clicked click to open event window
    // marker6.addListener("click", handleMarkerClick(marker6, infowindow6));

    // //CJ- click event listener added to the map to close the info window when the map is clicked
    // map.addListener('click', function() {
    // if (currentInfoWindow) {
    //     currentInfoWindow.close();
    // }
    // });

    //CJ- Dynamic JSON data for markers and info windows
    //CJ- Function to get the icon URL based on the event type
    function getIconUrl(eventType, eventTime) {
      //CJ- Create a new image object
      var icon = new Image();
      //CJ- Add an onload event listener to the image object
      icon.onload = function () {
        //CJ- The image has been loaded
      };

      // CJ- Create a variable to store the time category
      var timeCategory;
      // CJ- Get the current time in milliseconds
      var currentTime = new Date().getTime();
      // CJ- Get the event start time in milliseconds
      var eventStartTime = new Date(eventTime).getTime();
      // CJ- Calculate the time difference in hours
      var timeDifference = (eventStartTime - currentTime) / (1000 * 60 * 60);

      // CJ- Determine the time category based on the time difference
      if (timeDifference < 8) {
        // CJ- Event is starting in less than 8 hours
        timeCategory = "starting_soonest";
      } else if (timeDifference < 16) {
        // CJ- Event is starting in between 8 and 16 hours
        timeCategory = "starting_in_between";
      } else {
        // CJ- Event is starting in more than 16 hours
        timeCategory = "starting_furthest_away";
      }

      //CJ- switch statement to return the icon URL based on the event type
      switch (eventType) {
        //CJ- case statement for each event type
        case "Charity":
          //CJ- switch statement to return the icon URL based on the time category
          switch (timeCategory) {
            case "starting_soonest":
              return "ChS.png";
            case "starting_in_between":
              return "ChO.png";
            case "starting_furthest_away":
              return "ChE.png";
          }
          break;
        case "Cultural":
          switch (timeCategory) {
            case "starting_soonest":
              return "CuS.png";
            case "starting_in_between":
              return "CuO.png";
            case "starting_furthest_away":
              return "CuE.png";
          }
          break;
        case "Education":
          switch (timeCategory) {
            case "starting_soonest":
              return "EdS.png";
            case "starting_in_between":
              return "EdO.png";
            case "starting_furthest_away":
              return "EdE.png";
          }
          break;
        case "Entertainment":
          switch (timeCategory) {
            case "starting_soonest":
              return "EnS.png";
            case "starting_in_between":
              return "EnO.png";
            case "starting_furthest_away":
              return "EnE.png";
          }
          break;
        case "Social":
          switch (timeCategory) {
            case "starting_soonest":
              return "SoS.png";
            case "starting_in_between":
              return "SoO.png";
            case "starting_furthest_away":
              return "SoE.png";
          }
          break;
        case "Sports":
          switch (timeCategory) {
            case "starting_soonest":
              return "SpS.png";
            case "starting_in_between":
              return "SpO.png";
            case "starting_furthest_away":
              return "SpE.png";
          }
          //CJ- default case for any other event type
          break;
        default:
          //CJ- return the default icon URL
          icon.src = "Crosshair.png";
      }
      //CJ- return the icon URL
      return icon.src;
    }
    //CJ- array to store events for random button
    let events = [];

    //CJ- Multiple Markers with Info Windows from JSON Data
    fetch("/eventsData.json")
      //CJ- convert data to JSON
      .then((response) => response.json())
      //CJ- log data to console
      .then((data) => {
        //CJ- loop through data array
        data.forEach((eventData, index) => {
          //CJ- create new marker for event
          const marker = new google.maps.Marker({
            //CJ- set position of marker to event location
            position: { lat: eventData.lat, lng: eventData.lon },
            map,
            //CJ- set title of marker to event name
            title: eventData.eventName,
            icon: {
              url: getIconUrl(eventData.eventType, eventData.eventTime),
              scaledSize: new google.maps.Size(48, 48),
            },
            //CJ- set animation to drop from top of map
            animation: google.maps.Animation.DROP,
            //CJ- add eventType property to marker
            eventType: eventData.eventType,
          });

          //CJ- Add the marker to the markers array
          markers.push(marker);

          //CJ- Create an info window for the event
          window.expandText = function (id) {
            //CJ- display the hidden text
            document.getElementById(id).style.display = "inline";
            //CJ- hide the read more button
            document.getElementById("btn-" + id).style.display = "none";
            //CJ- display the collapse button
            document.getElementById("collapse-btn-" + id).style.display =
              "inline";
          };

          // CJ- Function to handle the click event of the Collapse button
          window.collapseText = function (id) {
            //CJ- hide the extra text
            document.getElementById(id).style.display = "none";
            //CJ- display the read more button
            document.getElementById("btn-" + id).style.display = "inline";
            //CJ- hide the collapse button
            document.getElementById("collapse-btn-" + id).style.display =
              "none";
          };
          // CJ- Create an info window for the event
          const infowindow = new google.maps.InfoWindow({
            //CJ- div class to style info window content
            content: `
              <div class="info-window-content">
                <div class="text-container">
                  <h3>${eventData.eventName}</h3>
                  <div class="event-type-container">
                    <p><strong>Type:</strong></p>
                    <button class="toggle-btn" onclick="window.filterEvents('${
                      eventData.eventType
                    }')">${eventData.eventType}</button>

                  </div>
                  <p><strong>Group Name:</strong> ${eventData.groupName}</p> 
                  <p><strong>Start Time:</strong> ${new Date(
                    eventData.eventTime
                  ).toLocaleString()}</p> 
                  <p><strong>End Time:</strong> ${new Date(
                    eventData.eventEndTime
                  ).toLocaleString()}</p>
                  <p><strong>Location:</strong> ${
                    eventData.locationInfo
                  }</p> <!-- Location info -->
                  <p>${eventData.eventDetails.substring(
                    0,
                    100
                  )} <!-- Displays the first 100 characters -->
                      <span id="extra-text-${
                        eventData.eventId
                      }" class="extra-text">${eventData.eventDetails.substring(
              100
            )}</span> 
                      <button id="btn-extra-text-${
                        eventData.eventId
                      }" class="expand-collapse-btn" onclick="window.expandText('extra-text-${
              eventData.eventId
            }');">Read more</button>
                      <button id="collapse-btn-extra-text-${
                        eventData.eventId
                      }" class="expand-collapse-btn" style="display: none;" onclick="window.collapseText('extra-text-${
              eventData.eventId
            }');">Collapse</button>
                  </p>
                </div>
                <div class="image-source-container">
                  <img src="${eventData.eventImage}" alt="Event Image"> 
                  <div class="btn-container">
                    <a href="https://www.google.com/maps/dir//${
                      eventData.lat
                    },${
              eventData.lon
            }" target="_blank" class="directions-btn">Directions</a>
                    <a href="${
                      eventData.eventUrl
                    }" target="_blank" class="source-btn">Source</a>
                  </div>
                </div>
            `,
          });
          //CJ- moves marker and info window to events array
          events.push({
            marker: marker,
            infowindow: infowindow,
          });
          // CJ- Add an event listener to the marker to open the info window
          marker.addListener("click", () => {
            // Close the current info window if it's open
            if (currentInfoWindow) {
              currentInfoWindow.close();
            }
            //CJ- open the info window on the map at the marker location
            infowindow.open(map, marker);

            // CJ- Set the current info window to the newly opened one
            currentInfoWindow = infowindow;
          });
        });
      })
      //CJ- log error to console
      .catch((error) => {
        //CJ- log error to console
        console.error("Error fetching JSON data:", error);
      });

    //CJ- click event listener added to the map to close the info window when the map is clicked
    map.addListener("click", function () {
      if (currentInfoWindow) {
        currentInfoWindow.close();
      }
    });

    //CJ- Adds a click event listener to the random button to display a random event info window

    // EF Select the button with class 'item random'
    let btn = document.querySelector(".item.random");
    //CJ- Add a click event listener to the button
    btn.addEventListener("click", function () {
      // CJ- Select a random index from the events array to display an event
      let index = Math.floor(Math.random() * events.length);
      // CJ- Close the currently open info window if there is one
      if (currentInfoWindow) {
        currentInfoWindow.close();
      }
      //CJ- Open the info window for the random event
      events[index].infowindow.open(map, events[index].marker);
      //CJ- Set the current info window to the newly opened one
      currentInfoWindow = events[index].infowindow;
      //CJ- Center the map on the location of the random event
      map.setCenter(events[index].marker.getPosition());
    });
    //CJ- click event listener added to the map to close the info window when the map is clicked
    map.addListener("click", function () {
      if (currentInfoWindow) {
        currentInfoWindow.close();
      }
    });

    //CJ- Function to filter the events based on the event type
    window.filterEvents = function (eventType) {
      //CJ- If the current filter is the same as the clicked event type, remove the filter
      if (currentFilter === eventType) {
        //CJ- Set the current filter to null
        currentFilter = null;
        //CJ- Show all markers
        markers.forEach((marker) => {
          //CJ- Set the marker to be visible
          marker.setVisible(true);
        });
      } else {
        //CJ- If the current filter is not the same as the clicked event type, set the current filter to the clicked event type
        currentFilter = eventType;
        //CJ- Hide all markers that do not match the current filter
        markers.forEach((marker) => {
          //CJ- Set the marker to be visible if the event type matches the current filter
          marker.setVisible(marker.eventType === currentFilter);
        });
      }
    };

    // CJ- Check if geolocation is available
    if (navigator.geolocation) {
      // CJ- Get user's location
      navigator.geolocation.getCurrentPosition(
        // CJ- Success callback
        (position) => {
          // CJ- Create an object to store user's location
          const userLocation = {
            // CJ- Get user's latitude and longitude
            lat: position.coords.latitude,
            lng: position.coords.longitude,
          };

          //CJ- TO-DO- get city from userLocation (lat/long) and store as global variable

          // CJ- Center the map to user's location
          map.setCenter(userLocation);
          // CJ- Add a marker for user's location
          const userMarker = new google.maps.Marker({
            // CJ- Set the position of the marker to user's location
            position: userLocation,
            // CJ- Set the map to the map object
            map,
            // CJ- Set the title of the marker
            title: "Your Location",
            icon: {
              url: "user.png",
              scaledSize: new google.maps.Size(48, 48),
            },
            animation: google.maps.Animation.DROP,
          });
        },
        // CJ- Error handling
        (error) => {
          // CJ- Log error to console
          console.error("Error getting user's location:", error);
        }
      );
    } else {
      console.error("Geolocation is not supported by this browser.");
    }
  }

  window.onload = function () {
  const encodedApiKey = window.prompt("Please enter your name:", "");
  // Now you can decode the API key
  fetch("http://localhost:3000/decrypt", {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
    },
    body: JSON.stringify({ encryptedApiKey: encodedApiKey }),
  })
    .then((response) => response.json())
    .then((data) => {
      const apiKey = data.decryptedApiKey;
      // Now you can use the decoded API key in your application
      loadGoogleMaps(apiKey);
    })
    .catch((error) => console.error("Error:", error));
};

function loadGoogleMaps(apiKey) {
  const script = document.createElement('script');
  script.src = `https://maps.googleapis.com/maps/api/js?key=${apiKey}&map_ids=13185b1ffbbba3af&callback=initMap`;
  script.async = true;
  document.body.appendChild(script);
}

</script>
<!-- CJ- using env variable to store API key, must be implemented on render website-->
<!-- <script> const key = env.mapApiKey; console.log(key); </script> -->

<!-- CJ- Solution to hiding key -->
<!-- <script>
  const apiKey = process.env.GOOGLE_MAPS_API_KEY;
  const script = document.createElement('script');
  script.src = `https://maps.googleapis.com/maps/api/js?key=${apiKey}&map_ids=13185b1ffbbba3af&callback=initMap`;
  document.body.appendChild(script);
</script> -->

<!-- CJ- loading map API & Map ID, after script because of callback function in URL that connects to initMap function -->

<!-- davey attempt -->
<!-- <script>
  fetch('/api-key')
      .then(response => response.json())
      .then(data => {
        // data is the JSON object received from the server
        const apiKey = data.apiKey;
        // Now you can use apiKey in your client-side code
        const script = document.createElement('script');
          script.src = `https://maps.googleapis.com/maps/api/js?key=${AIzaSyClOptqTJtbgqusnHIRbB4RzaS0OsoC2ic}&map_ids=13185b1ffbbba3af&callback=initMap`;
          script.defer = true;
          script.async = true;
          document.head.appendChild(script);
      })
      .catch(error => console.error('Error:', error));

</script> -->


