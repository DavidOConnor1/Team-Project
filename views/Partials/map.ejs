<html>

    <style>
      html {
        /* CJ- So that padding won't effect the final width/height of elements */
        box-sizing: border-box;
        /* CJ- for better accessibility */
        font-size: 100%; 
      }
      /* CJ- wildcard to select all elements and pseudo elements, before and after, to inherit that box sizing property  */
      *, *::before, *::after {
        box-sizing: inherit;
      }

      body {
        margin: 0;
        padding: 0;
      }
    </style>

  <body>
    <script>
      //  CJ- using callback function “initMap” from Google Map Script API URL.  This ensures the javascript will only run once the API has finished loading, otherwise it would run before map exists.
       function initMap() {
        // <!-- CJ- targeting "map-div" to load map -->
        map = new google.maps.Map(document.getElementById("map-div"), {
          // CJ- loads map at specific lattitude and longitude
          center: { lat: 53.349076911151386, lng: -6.242441879918039 },
          // CJ- defines the zoom level
          zoom: 14,
          // CJ- mapId is the id of the map created in Google Cloud Platform
          mapId: "13185b1ffbbba3af",
          //CJ- remove default map controls from map
          mapTypeControl: false,
          fullscreenControl: false,
          streetViewControl: false,
        });

          // CJ- creates new constant named marker to attach to event listener to open info window
          const marker1 = new google.maps.Marker({
            // CJ- sets the location of marker
            position: { lat: 53.34904445277732, lng: -6.2430142587188975 },
            map,
            //CJ- title of marker
            title: "Education: Starting",
            icon: {
              // CJ- location of icon image
              url: "Education Starting.png",
              // CJ- new Google maps object that defines the size of icon image
              scaledSize: new google.maps.Size(48, 48),
            },
              //CJ- animation that drops pin from top of the map
              animation: google.maps.Animation.DROP,
          });

          //CJ- new info window object set to open when marker is clicked
          const infowindow1 = new google.maps.InfoWindow({
            // CJ- content of info window
            content: "Education<br>Status: Starting<br>Location: National College Of Ireland<br>Mayor Street Lower<br> Join us for an enlightening evening of knowledge and camaraderie<br>Let's expand our horizons and make lasting memories together!",
          });

          // CJ- event listener that opens info window when clicked click to open event window
          marker1.addListener("click", () => {
            // CJ- open info window on map at marker location
            infowindow1.open(map, marker1);
          });

          const marker2 = new google.maps.Marker({
            position: { lat: 53.36013894903569, lng: -6.260932804848787 },
            map,
            title: "Social: Starting",
            icon: {
              url: "Social Starting.png",
              scaledSize: new google.maps.Size(48, 48),
            },
            animation: google.maps.Animation.DROP,
          });

          const infowindow2 = new google.maps.InfoWindow({
            content: "Social<br>Status: Starting<br>Location: Dorset Street Lower<br>Dublin, DO1A2Y5<br>Join us for a fun-filled evening of laughter and entertainment<br>Let's create unforgettable memories together!",
          });

          marker2.addListener("click", () => {
            infowindow2.open(map, marker2);
          });

          const marker3 = new google.maps.Marker({
            position: { lat: 53.355, lng: -6.26 },
            map,
            title: "Charity: Ending",
            icon: {
              url: "Charity Ending.png",
              scaledSize: new google.maps.Size(48, 48),
            },
            animation: google.maps.Animation.DROP,
          });

          //info window
          const infowindow3 = new google.maps.InfoWindow({
            content: "Charity<br>Status: Ending<br>Location: O'Connell Street Upper<br>Dublin, DO1A2Y5<br>Join us for a noble cause and make a difference in the world!",
          });

          marker3.addListener("click", () => {
            infowindow3.open(map, marker3);
          });

          const marker4 = new google.maps.Marker({
            position: { lat: 53.35, lng: -6.265 },
            map,
            title: "Culture: Ending",
            icon: {
              url: "Culture Ending.png",
              scaledSize: new google.maps.Size(48, 48),
            },
            animation: google.maps.Animation.DROP,
          });

          const infowindow4 = new google.maps.InfoWindow({
            content: "Culture<br>Status: Ending<br>Location: Temple Bar<br>Dublin, DO1A2Y5<br>Experience the rich cultural heritage and immerse yourself in the arts!",
          });

          marker4.addListener("click", () => {
            infowindow4.open(map, marker4);
          });

        // CJ- Check if geolocation is available
        if (navigator.geolocation) {
          // CJ- Get user's location
          navigator.geolocation.getCurrentPosition(
            // CJ- Success callback
            (position) => {
              // CJ- Create an object to store user's location
              const userLocation = {
                // CJ- Get user's latitude and longitude
                lat: position.coords.latitude,
                lng: position.coords.longitude,
              };

              // CJ- Center the map to user's location
              loadMap(userLocation);

              // CJ- Add a marker for user's location
              const userMarker = new google.maps.Marker({
                // CJ- Set the position of the marker to user's location
                position: userLocation,
                // CJ- Set the map to the map object
                map,
                // CJ- Set the title of the marker
                title: "Your Location",
              });
            },
            // CJ- Error handling
            (error) => {
              // CJ- Log error to console
              console.error("Error getting user's location:", error);
            }
          );
        } else {
          console.error("Geolocation is not supported by this browser.");
        }

      
      }
    </script>

    <!-- CJ- loading map API & Map ID, after script because of callback function in URL that connects to initMap function -->
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBo9c5JnECXrfMnYkVA2TSyStdrbZ3TO-w&map_ids=13185b1ffbbba3af&callback=initMap"></script>
  </body>
</html>
